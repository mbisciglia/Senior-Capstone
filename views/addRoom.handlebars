<!DOCTYPE html>
<html>
  <style>
    #addRoomDiv {
      position: absolute;
      z-index: 9;
      text-align: center;
      border: 3px solid #ebdd17;
      background-color: orange;
      resize: both;
      overflow: auto;
      opacity: 0.7;
    }
  </style>

  <body>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-2">
          <select id="floorList" style="margin-bottom: 1em"></select>
          <button
            type="button"
            id="addRoomBTN"
            class="btn btn-success"
            style="margin-bottom: 1em; background-color:#4b6777; border-color:#4b6777;">
            Add Room
          </button>

          <div class="form-group">
            <label for="addfloor" style="color:white ">
              Room Number
            </label>
            <input class="form-control" id="roomNum" />
          </div>

          <button
            type="button"
            id="confRoomBTN"
            class="btn btn-success"
            style="margin-bottom: 1em; background-color:#4b6777; border-color:#4b6777;">

            Confirm Room
          </button>
          <button
            type="button"
            id="confFloorBTN"
            class="btn btn-success"
            style="margin-bottom: 1em; background-color:#4b6777; border-color:#4b6777;">

            Confirm Floor
          </button>

          <h4 class="d-flex justify-content-between align-items-center mb-3">
            <span style="color:white">Available Sensors</span>
            <span
              id="numSensors"
              class="badge badge-secondary badge-pill"
              style="background-color:black;"
            ></span>
          </h4>
          <ul id="freeNodesList" class="list-group"></ul>
        </div>
        <div class="col-md-10">
          <div id="mapContainer">
            <img
              id="mapImg"
              alt="Bootstrap Image Preview"
              src="https://i.redd.it/uo0u67glvlq01.jpg"
            />

            <div id="addRoomDiv" class="list-group"></div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

<script src="/js/dragElement.js"></script>
<script>
  var dragger = null;
  (() => {
    document.getElementById("floorList").addEventListener("change", function() {
      loadFloor(this.value);
    });

    dragger = new DragElement(
      document.getElementById("addRoomDiv"),
      document.getElementById("mapImg")
    );
  })();

  document.getElementById("confFloorBTN").addEventListener("click", function() {
    window.location = "display";
  });

  document.getElementById("addRoomBTN").addEventListener("click", function() {
    var ele = document.getElementById("addRoomDiv");
    if (ele.classList.contains("vis")) {
      console.log("div already created");
      ele.classList.remove("vis");
    } else {
      ele.classList.add("vis");
      ele.style.top = "0";
      ele.style.left = "0";
      ele.style.height = "30%";
      ele.style.width = "30%";
    }
  });

  document.getElementById("confRoomBTN").addEventListener("click", function() {
    var selectedArea = document.getElementById("addRoomDiv");
    var roomNum = document.getElementById("roomNum");

    if (selectedArea.style.display == "none") {
      alert("Please first select your region with the add room button");
    } else if (roomNum.value == "") {
      alert("Please first enter in a room number");
    } else {
      var roomData = dragger.getPercentageDimensions();

      var acc = getCookie("uid");
      var room = roomNum.value;
      roomNum.value = "";

      var floor = document.getElementById("floorList").value;

      roomData.room = room;

      addLocalRoomToMap(roomData, document.getElementById("mapContainer"));

      var db = firebase.database();
      var dbref = db.ref(acc + "/images/" + "floorData/" + floor + "/");
      dbref.push(roomData);

      dragger.reset();
      clearCurrentRoomList();
      loadRoomList();
    }
  });

  function addLocalRoomToMap(roomData, mapContainer) {
    var roomDiv = document.createElement("div");
    roomDiv.classList.add("room-div");

    roomDiv.dataset.roomNumber = roomData.room;

    roomDiv.style.top = roomData.top;
    roomDiv.style.left = roomData.left;
    roomDiv.style.height = roomData.height;
    roomDiv.style.width = roomData.width;

    mapContainer.appendChild(roomDiv);
  }

  function getUserAsync() {
    return new Promise((resolve, reject) => {
      var response = fetch("/currentUser", {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      })
        .then(resp => {
          if (resp.status == 200) {
            return resp.json();
          } else {
            reject(resp);
          }
        })
        .then(function(data) {
          console.log(data);
          currUser = data;

          resolve(data);
        })
        .catch(err => {
          reject(err);
        });
    });
    // expected output: 'resolved'
  }

  function fetchRoomList() {
    return new Promise((resolve, reject) => {
      var acc = getCookie("uid");
      var floor = document.getElementById("floorList").value;

      db = firebase.database().ref(acc + "/" + floor);
      db.once("value")
        .then(function(dataSnapshot) {
          return dataSnapshot.val();
        })
        .then(function(rooms) {
          var keys = [];
          for (var k in rooms) {
            keys.push(k);
          }
          resolve(keys);
        });
    });
  }

  function fetchRooms() {
    var rooms = [];

    return new Promise((resolve, reject) => {
      var acc = getCookie("uid");
      var floor = document.getElementById("floorList").value;

      db = firebase
        .database()
        .ref(acc + "/images/" + "floorData/" + floor + "/");
      db.on("value", function(snapshot) {
        snapshot.forEach(function(childSnapshot) {
          var childData = childSnapshot.val();

          rooms.push(childData);
        });

        resolve(rooms);
      });
    });
  }

  function clearCurrentRooms() {
    var rooms = document.querySelectorAll("#mapContainer .room-div");

    rooms.forEach(r => r.remove());
  }

  //roomOBJ = { room: room, top: top, left: left, height: height, width: width }
  function recreateDiv(roomOBJ) {
    var imgDiv = document.getElementById("mapContainer");
    var roomDiv = document.createElement("div");

    roomDiv.dataset.roomNumber = roomOBJ.room;
    roomDiv.classList.add("room-div");

    roomDiv.style.top = roomOBJ.top;
    roomDiv.style.left = roomOBJ.left;
    roomDiv.style.height = roomOBJ.height;
    roomDiv.style.width = roomOBJ.width;

    imgDiv.appendChild(roomDiv);
  }

  function clearCurrentRoomList() {
    var freeNodesList = document.getElementById("freeNodesList");
    while (freeNodesList.firstChild) {
      freeNodesList.removeChild(freeNodesList.firstChild);
    }
    document.getElementById("numSensors").innerHTML = "";
  }

  function loadRoomList() {
    console.log("Inside loadRoomList");
    var ul = document.getElementById("freeNodesList");
    var count = document.getElementById("numSensors");

    fetchRoomList().then(rooms => {
      console.log("Did this work? Promise result", rooms);
      console.log(rooms.length);
      count.innerHTML = rooms.length;
      fetchRooms()
        .then(madeRooms => {
          //console.log("Made in madeRooms " + madeRooms);

          //rooms are datapoints available on the db
          for (var i = 0, l = rooms.length; i < l; i++) {
            console.log("Inside loadRoomList: " + i + ": " + rooms[i]);
            var li = document.createElement("li");
            li.className = "list-group-item";
            li.appendChild(document.createTextNode(rooms[i]));


            for (var j = 0, m = madeRooms.length; j < m; j++)
            {
              if(rooms[i] == madeRooms[j].room)
              {
                console.log("Bang Bang: ? : " + rooms[i]);
                li.className = "list-group-item list-group-item-success";
              }
              console.log()
            }
            ul.appendChild(li);

          }

        })
        .catch(err => {
          console.error(err);
        });
    });
  }

  function loadRooms() {
    clearCurrentRooms();
    //clear current available list
    fetchRooms()
      .then(rooms => {
        console.log("Promise result", rooms);
        console.log(rooms.length);

        for (var i = 0, l = rooms.length; i < l; i++) {
          console.log(i + ": " + rooms[i].room);
          recreateDiv(rooms[i]);
        }
      })
      .catch(err => {
        console.error(err);
      });
  }

  function loadFloor(floorName) {
    clearCurrentRoomList();
    console.log(`Loading ${floorName}`);
    var storageRef = firebase.storage().ref();
    var acc = getCookie("uid");
    var ref = storageRef.child(acc + "/" + floorName);
    ref
      .getDownloadURL()
      .then(function(url) {
        // `url` is the download URL for 'images/stars.jpg'

        // This can be downloaded directly:
        var xhr = new XMLHttpRequest();
        xhr.responseType = "blob";
        xhr.onload = function(event) {
          var blob = xhr.response;
        };
        xhr.open("GET", url);
        xhr.send();
        loadRooms();
        loadRoomList();

        // Or inserted into an <img> element:
        var img = document.getElementById("mapImg");
        img.src = url;
      })
      .catch(function(error) {
        console.log(error);
        console.log("there was an error getting images");
      });
  }

  loadFloorNames();

  function fetchFloorNames() {
    var names = [];

    var isFirst = true;
    return new Promise((resolve, reject) => {
      var acc = getCookie("uid");
      db = firebase.database().ref(acc + "/images/" + "floors/");
      db.on("value", function(snapshot) {
        snapshot.forEach(function(childSnapshot) {
          var childData = childSnapshot.val();

          if (isFirst) {
            isFirst = false;
            loadFloor(childData.name);
          }

          names.push(childData.name);
        });

        resolve(names);
      });
    });
  }

  function loadFloorNames() {
    var list = document.getElementById("floorList");
    //var list2 = document.getElementById("floorDropdown");

    fetchFloorNames()
      .then(names => {
        console.log("Promise result", names);
        for (var i = 0, l = names.length; i < l; i++) {
          var option = document.createElement("option");
          option.text = names[i];
          list.add(option);
        }
      })
      .catch(err => {
        console.error(err);
      });
  }
</script>
