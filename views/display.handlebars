<!DOCTYPE html>
<html>
  <style>
    #mydiv {
      position: relative;
      z-index: 9;
      text-align: center;
      border: 3px solid #ebdd17;
      background-color: orange;
      resize: both;
      overflow: auto;
      opacity: 0.7;
    }

    #mydivheader {
      padding: 10px;
      cursor: move;
      z-index: 10;
      background-color: rgba(47, 255, 20, 0.5);
      color: black;
    }
  </style>

  <body>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-4">
          <div class="dropdown">
            <select id="floorList" style="margin-bottom: 1em"></select>
          </div>
          <div class="jumbotron" id="current-room-info"></div>
        </div>
        <div class="col-md-8">
          <div
            id="testContainer"
            class="testContainer"
            style="
				  position: absolute;
				  width: 55vw;
				  height:100%;
				  "
          >
            <img
              id="img"
              alt="Bootstrap Image Preview"
              style="position:absolute"
              src="https://i.redd.it/uo0u67glvlq01.jpg"
            />
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

<script>
  (() => {
    document.getElementById("floorList").addEventListener("change", function() {
      loadFloor(this.value);
    });
  })();

  function showRoomInfo(roomOBJ) {
    fetchReadings(roomOBJ.room)
      .then(roomData => {
        var dataHtmlString = `<span class="roominfo-title">${
          roomOBJ.room
        }</span>`;

        Object.keys(roomData).forEach(k => {
          if (k === "time") {
            //TODO: Parse time
          }
          dataHtmlString += `<span>${k}: ${roomData[k]}</span>`;
        });

        document.getElementById("current-room-info").innerHTML = dataHtmlString;
      })
      .catch(err => {
        console.error(err);
      });
  }

  function clearRoomInfo() {
    document.getElementById("current-room-info").innerHTML = "";
  }

  //roomOBJ = { room: room, top: top, left: left, height: height, width: width }
  function recreateDiv(roomOBJ) {
    var imgDiv = document.getElementById("testContainer");
    var roomDiv = document.createElement("div");

    roomDiv.dataset.roomNumber = roomOBJ.room;
    roomDiv.classList.add("room-div");

    roomDiv.style.top = roomOBJ.top;
    roomDiv.style.left = roomOBJ.left;
    roomDiv.style.height = roomOBJ.height;
    roomDiv.style.width = roomOBJ.width;

    imgDiv.appendChild(roomDiv);

    roomDiv.onmouseenter = () => showRoomInfo(roomOBJ);
    roomDiv.onmouseout = () => clearRoomInfo();
  }

  function clearCurrentRooms() {
    var rooms = document.querySelectorAll("#testContainer .room-div");

    rooms.forEach(r => r.remove());
  }

  function fetchReadings(roomName) {
    return new Promise((resolve, reject) => {
      var acc = getCookie("uid");
      var floor = document.getElementById("floorList").value;
      var data;

      //console.log(acc + "/" + floor + "/" + roomName);

      db = firebase.database().ref(acc + "/" + floor + "/" + roomName);
      db.on("value", function(snapshot) {
        data = snapshot.val();
        resolve(data.Readings);
      });
    });
  }

  function fetchRooms() {
    var rooms = [];

    return new Promise((resolve, reject) => {
      var acc = getCookie("uid");
      var floor = document.getElementById("floorList").value;

      db = firebase
        .database()
        .ref(acc + "/images/" + "floorData/" + floor + "/");
      db.on("value", function(snapshot) {
        snapshot.forEach(function(childSnapshot) {
          var childData = childSnapshot.val();

          rooms.push(childData);
        });

        resolve(rooms);
      });
    });
  }

  function loadRooms() {
    clearCurrentRooms();

    fetchRooms()
      .then(rooms => {
        console.log("Promise result", rooms);
        console.log(rooms.length);

        for (var i = 0, l = rooms.length; i < l; i++) {
          console.log(i + ": " + rooms[i].room);
          recreateDiv(rooms[i]);
        }
      })
      .catch(err => {
        console.error(err);
      });
  }

  function loadFloor(floorName) {
    console.log(`Loading ${floorName}`);
    var storageRef = firebase.storage().ref();
    var acc = getCookie("uid");
    var ref = storageRef.child(acc + "/" + floorName);

    ref
      .getDownloadURL()
      .then(function(url) {
        // `url` is the download URL for 'images/stars.jpg'

        // This can be downloaded directly:
        var xhr = new XMLHttpRequest();
        xhr.responseType = "blob";
        xhr.onload = function(event) {
          var blob = xhr.response;
        };
        xhr.open("GET", url);
        xhr.send();

        loadRooms();

        // Or inserted into an <img> element:
        var img = document.getElementById("img");
        img.src = url;
      })
      .catch(function(error) {
        console.log(error);
        console.log("there was an error getting images");
      });

  }

  loadFloorNames();

  function fetchNames() {
    var names = [];

    var isFirst = true;
    return new Promise((resolve, reject) => {
      var acc = getCookie("uid");

      db = firebase.database().ref(acc + "/images/" + "floors");
      db.on("value", function(snapshot) {
        snapshot.forEach(function(childSnapshot) {
          var childData = childSnapshot.val();

          if (isFirst) {
            isFirst = false;
            loadFloor(childData.name);
          }

          //console.log(childData);
          names.push(childData.name);
        });

        resolve(names);
      });
    });
  }

  function loadFloorNames() {
    var list = document.getElementById("floorList");
    //var list2 = document.getElementById("floorDropdown");

    fetchNames()
      .then(names => {
        console.log("Promise result", names);
        for (var i = 0, l = names.length; i < l; i++) {
          var option = document.createElement("option");
          option.text = names[i];
          list.add(option);
          //list2.add(option);
          //console.log("bazzanngga");
        }

        loadRooms();
      })
      .catch(err => {
        console.error(err);
      });
  }
</script>
